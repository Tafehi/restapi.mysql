name: API in Kotlin using Micronaut

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_URL: ${{ secrets.MYSQL_URL }}

jobs:
  compile:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt' # Specify the JDK distribution
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Compile
        run: ./gradlew assemble


      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: application
          path: build/libs/mysqlRestApi-1.0.0.jar

  test:
    runs-on: ubuntu-24.04
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Test
        run: ./gradlew test --stacktrace
    continue-on-error: true


  code_style:
    runs-on: ubuntu-24.04
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Check Code Style
        run: ./gradlew ktlintKotlinScriptFormat

      - name: Upload ktlint report
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ktlint-report
          path: build/ktlint.xml
    continue-on-error: true

  package:
    runs-on: ubuntu-24.04
    needs:
      - test
      - code_style
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Package
        run: ./gradlew shadowJar
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: application
          path: build/libs/mysqlRestApi-1.0.0.jar

  dockerize:
    runs-on: ubuntu-24.04
    needs: package
    services:
      docker:
        image: docker:24.0.5
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t application:latest .

      - name: Tag Docker image
        run: docker tag application:latest ${{ secrets.AWS_ECR_REGISTRY }}/application:latest

      - name: Login to Amazon ECR
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Push Docker image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/application:latest

  send-to-aws:
    runs-on: ubuntu-24.04
    needs: dockerize
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ECR_REGISTRY }}/application:latest
